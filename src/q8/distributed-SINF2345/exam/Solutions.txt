Hi,

The exam is attached here and solutions are given below. 

MCQs:
1:  a
2:  a
3:  d
4:  c
5:  abc
6:  b
7:  abcd
8:  abcd
9:  d
10: bd

Reasoning questions:

1. See slides on failure detection. Both properties are liveness.

2. See Solution 2.8 in the book.

3. See Solution 3.11 in the book. This solution is acceptable, provided that the processes continue to issue broadcasts forever. In the case where processes stop broadcasting, this algorithm behaves like BEB, so it does not satisfy [i]agreement[/i]. Assume 3 processes: p1 broadcasts m1 and fails in the middle. p2 delivers m1 and p3 does not. As soon as p2 broadcasts a message m2 (which would be causally succeeding m1), the [i]causal property[/i] of this broadcast would guarantee [i]agreement[/i] for m1. However, if p2 does not broadcast any message m2 after this, we don't have agreement.

4. See lecture 8, slides 27-36.

5. 
a) No. If the process decides on line 16 and then crashes before executing line 17, you can easily violate [i]uniform agreement[/i] of uniform consensus.
b) No. See the following execution showing violation of [i]uniform agreement[/i] of uniform consensus.
[attachment=1]sol5b.jpg[/attachment]
A way around may be to only ucDeliver in the last round.

6. See lecture 12, slides 24-27. Building Consensus with TOB can be implemented by every process using TOB to broadcast its proposal and deciding on the first proposal delivered.

7. The two-army problem is an agreement problem. We know Paxos tolerates message loss (from the paper). We also know that it can guarantee safety in a fail-silent model assuming a majority of correct processes, and it needs partial synchrony for termination (liveness). Here processes don't fail so you only need to assume partial-synchrony.
Essentially you can use Paxos in the given environment, however, the catch is that here, the value the processes need to agree on is a time of attack, and the problem is, that for any proposed time of attack, ToA, Paxos is not guaranteed to terminate before the agreed upon ToA, which makes the two-army problem unsolvable.

8. No. Assume 2 processes, p1 and p2. If both suspect each other, p1 may complete the write of value 1, without waiting for an ACK from p2. p2 may complete the write of value 2 without waiting for an ACK from p1. Now, a Read operation issued at p1 after the completion of p2's Write may return value 1, thus not satisfying atomic consistency.

9. See lecture 12, slides 40-45.

10. No. Say there are 3 processes, p1, p2, and p3. Further, assume the EPFD for p2 and p3 wrongly detect p1 as dead. Now, they will run consensus and install a view that doesn't contain p1. This will violate the [i]accuracy[/i] property of Group Membership.

Cheers,
Cosmin & Tallat